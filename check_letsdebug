#!/bin/sh
#
# check_letsdebug
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2021 Matteo Corti <matteo@corti.li>
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.

#### TO DO
# Timeout


################################################################################
# Constants

VERSION=1.0.0
SHORTNAME="LETSDEBUG"

SIGNALS="HUP INT QUIT TERM ABRT"

LC_ALL=C

# return value for the creation of temporary files
TEMPFILE=""

################################################################################
# Variables
STATUS_OK=0
STATUS_WARNING=1
STATUS_CRITICAL=2
STATUS_UNKNOWN=3
WARNING_MSG=""
CRITICAL_MSG=""
ALL_MSG=""
DEBUG=0
DEBUG_FILE=""

################################################################################
# Functions

################################################################################
# Prints usage information
# Params
#   $1 error message (optional)
usage() {

    if [ -n "$1" ] ; then
        echo "Error: $1" 1>&2
    fi

    #### The following line is 80 characters long (helps to fit the help text in a standard terminal)
    ######--------------------------------------------------------------------------------

    echo
    echo "Usage: check_letsdebug -d domain [OPTIONS]"
    echo
    echo "Arguments:"
    echo "   -D,--domain domain              domain"
    echo
    echo "Options:"
    echo "   -d,--debug                      produces debugging output (can be specified more than once)"
    echo "      --debug-file file            writes the debug messages to file"
    echo "      --dig-bin path               path of the dig binary to be used"
    echo "   -h,--help,-?                    this help message"
    echo "      --proxy proxy                sets http_proxy and the s_client -proxy option"
    echo "      --temp dir                   directory where to store the temporary files"
    echo "   -t,--timeout                    seconds timeout after the specified time"
    echo "                                   (defaults to ${TIMEOUT} seconds)"
    echo "   -v,--verbose                    verbose output (can be specified more than once)"
    echo "   -V,--version                    version"
    echo "   -4                              force IPv4"
    echo "   -6                              force IPv6"
    echo
    echo
    echo "Report bugs to https://github.com/matteocorti/check_letsdebug/issues"
    echo

    exit "${STATUS_UNKNOWN}"

}

################################################################################
# Prints the given message to STDERR with the prefix '[DBG] ' if the debug
# command line option was specified
# $1: string
# $2: level (optional default 1)
debuglog() {

    MESSAGE=$1
    LEVEL=$2

    if [ -z "${LEVEL}" ] ; then
        #default
        LEVEL=1
    fi

    if [ "${LEVEL}" -le "${DEBUG}" ] ; then
        echo "${1}" | sed 's/^/[DBG] /' >&2
    fi

    # debuglog is also called during the --debug-file sanity checks: we have
    # to check if the file exists
    if [ -n "${DEBUG_FILE}" ] && [ -e "${DEBUG_FILE}" ] && ! [ -d "${DEBUG_FILE}" ] && [ -w "${DEBUG_FILE}" ] ; then
        echo "${1}" >> "${DEBUG_FILE}"
    fi

}

################################################################################
# Checks if the given file can be created and written
# $1: file name
open_for_writing() {

    FILE_TO_OPEN=$1

            if [ -d "${FILE_TO_OPEN}" ] ; then

            unknown "${FILE_TO_OPEN} is a directory"

        elif [ -e "${FILE_TO_OPEN}" ] ; then

                # file already exists
                if [ ! -w "${FILE_TO_OPEN}" ] ; then
                    unknown "Cannot write to ${FILE_TO_OPEN}"
                fi

        else

            FILE_TO_OPEN_DIRECTORY=$( dirname "${FILE_TO_OPEN}" )
            if [ ! -w "${FILE_TO_OPEN_DIRECTORY}" ] ; then
                unknown "Cannot write to ${FILE_TO_OPEN}"
            fi

        fi

        # clear / create the file
        true > "${FILE_TO_OPEN}"

}

################################################################################
# Prints the given message to STDOUT if the verbose command line opttion was
# specified
# $1: string
# $2: level (optional default 1)
verboselog() {

    MESSAGE=$1
    LEVEL=$2

    if [ -z "${LEVEL}" ] ; then
        #default
        LEVEL=1
    fi

    if [ "${LEVEL}" -le "${VERBOSE}" ] ; then
        echo "${MESSAGE}" >&2
    fi

}

################################################################################
# trap passing the signal name
# see https://stackoverflow.com/questions/2175647/is-it-possible-to-detect-which-trap-signal-in-bash/2175751#2175751
trap_with_arg() {
    func="$1" ; shift
    for sig ; do
        # shellcheck disable=SC2064
        trap "${func} ${sig}" "${sig}"
    done
}

################################################################################
# Cleanup temporary files
remove_temporary_files() {
    debuglog "cleaning up temporary files"
    # shellcheck disable=SC2086
    if [ -n "${TEMPORARY_FILES}" ]; then
        debuglog "$(echo "${TEMPORARY_FILES}" | tr '\ ' '\n')"
        rm -f ${TEMPORARY_FILES}
    fi
}

################################################################################
# Cleanup when exiting
cleanup() {
    SIGNAL=$1
    debuglog "signal caught ${SIGNAL}"
    remove_temporary_files
    # shellcheck disable=SC2086
    trap - ${SIGNALS}
    exit
}

create_temporary_file() {

    # create a temporary file
    TEMPFILE="$( mktemp "${TMPDIR}/XXXXXX" 2> /dev/null )"
    if [ -z "${TEMPFILE}" ] || [ ! -w "${TEMPFILE}" ] ; then
        unknown 'temporary file creation failure.'
    fi

    debuglog "temporary file ${TEMPFILE} created"

    # add the file to the list of temporary files
    TEMPORARY_FILES="${TEMPORARY_FILES} ${TEMPFILE}"

}

################################################################################
# prepends critical messages to list of all messages
# Params
#   $1 error message
prepend_critical_message() {

    debuglog "CRITICAL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    debuglog "prepend_critical_message: new message    = $1"
    debuglog "prepend_critical_message: SHORTNAME      = ${SHORTNAME}"
    debuglog "prepend_critical_message: MSG            = ${MSG}"
    debuglog "prepend_critical_message: CRITICAL_MSG   = ${CRITICAL_MSG}"
    debuglog "prepend_critical_message: ALL_MSG 1      = ${ALL_MSG}"

    MSG="${SHORTNAME} CRITICAL: ${1}"

    if [ "${CRITICAL_MSG}" = "" ]; then
        CRITICAL_MSG="${MSG}"
    fi

    ALL_MSG="\\n    ${MSG}${ALL_MSG}"

    debuglog "prepend_critical_message: MSG 2          = ${MSG}"
    debuglog "prepend_critical_message: CRITICAL_MSG 2 = ${CRITICAL_MSG}"
    debuglog "prepend_critical_message: ALL_MSG 2      = ${ALL_MSG}"
    debuglog "CRITICAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"

}

################################################################################
# Exits with a critical message
# Params
#   $1 error message
critical() {

    remove_temporary_files

    debuglog 'exiting with CRITICAL'
    debuglog "ALL_MSG = ${ALL_MSG}"

    NUMBER_OF_ERRORS=$( printf '%b' "${ALL_MSG}" | wc -l )

    debuglog "number of errors = ${NUMBER_OF_ERRORS}"

    if [ "${NUMBER_OF_ERRORS}" -ge 2 ] && [ -n "${VERBOSE}" ] ; then
        printf '%s%s\nError(s):%b\n' "$1" "${PERFORMANCE_DATA}" "${ALL_MSG}"
    else
        printf '%s%s \n' "$1" "${PERFORMANCE_DATA}"
    fi

    exit "${STATUS_CRITICAL}"
}

################################################################################
# append all warning messages to list of all messages
# Params
#   $1 warning message
append_warning_message() {

    debuglog "WARNING >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    debuglog "append_warning_message: SHORTNAME    = ${SHORTNAME}"
    debuglog "prepend_warning_message: MSG         = ${MSG}"
    debuglog "prepend_warning_message: WARNING_MSG = ${WARNING_MSG}"
    debuglog "prepend_warning_message: ALL_MSG 1   = ${ALL_MSG}"

    MSG="${SHORTNAME} WARN: ${1}"

    if [ "${WARNING_MSG}" = "" ]; then
        WARNING_MSG="${MSG}"
    fi

    ALL_MSG="${ALL_MSG}\\n    ${MSG}"


    debuglog "prepend_warning_message: MSG 2          = ${MSG}"
    debuglog "prepend_warning_message: WARNING_MSG 2 = ${WARNING_MSG}"
    debuglog "prepend_warning_message: ALL_MSG 2      = ${ALL_MSG}"
    debuglog "WARNING <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"

}


################################################################################
# Exits with a warning message
# Param
#   $1 warning message
warning() {

    remove_temporary_files

    NUMBER_OF_ERRORS=$( printf '%b' "${ALL_MSG}" | wc -l )

    if [ "${NUMBER_OF_ERRORS}" -ge 2 ] && [ -n "${VERBOSE}" ]; then
        printf '%s%s\nError(s):%b\n' "$1" "${PERFORMANCE_DATA}" "${ALL_MSG}"
    else
        printf '%s %s\n' "$1" "${PERFORMANCE_DATA}"
    fi

    exit "${STATUS_WARNING}"
}

################################################################################
# Exits with an 'unknown' status
# Param
#   $1 message
unknown() {
    if [ -n "${HOST_NAME}" ] ; then
        if [ -n "${SNI}" ] ; then
            tmp=" ${SNI}"
        elif [ -n "${FILE}" ] ; then
            tmp=" ${FILE}"
        else
            tmp=" ${HOST_NAME}"
        fi
    fi
    remove_temporary_files
    printf '%s UNKNOWN%s: %s\n' "${SHORTNAME}" "${tmp}" "$1"
    exit "${STATUS_UNKNOWN}"
}

################################################################################
# To set a variable with an HEREDOC in a POSIX compliant way
# see: https://unix.stackexchange.com/questions/340718/how-do-i-bring-heredoc-text-into-a-shell-script-variable
# Usage:
#   set_variable variablename<<'HEREDOC'
#   ...
#  HEREDOC
set_variable() {
    # shellcheck disable=SC2016
    eval "$1"'=$(cat)'
}

################################################################################
# Executes command with a timeout
# Params:
#   $1 command
#   $2 where to put the stdout
#   $3 where to put the stderr
# Returns 1 if timed out 0 otherwise
exec_with_timeout() {

    time=${TIMEOUT}

    # start the command in a subshell to avoid problem with pipes
    # (spawn accepts one command)
    command="/bin/sh -c \"$1\""

    OUTFILE=/dev/null
    if [ -n "$2" ] ; then
        OUTFILE=$2
    fi
    ERRFILE=/dev/null
    if [ -n "$3" ] ; then
        ERRFILE=$3
    fi

    start_time=$( date +%s )

    debuglog "executing with timeout (${time}s): $1"
    debuglog "  start time = ${start_time}"

    if [ -n "${TIMEOUT_BIN}" ] ; then

        debuglog "$(printf "%s %s %s\\n" "${TIMEOUT_BIN}" "${time}" "${command}")"

        # We execute timeout in the backgroud so that it can be relay a signal to 'timeout'
        # https://unix.stackexchange.com/questions/57667/why-cant-i-kill-a-timeout-called-from-a-bash-script-with-a-keystroke/57692#57692
        eval "${TIMEOUT_BIN} ${time} ${command} &" > "${OUTFILE}" 2> "${ERRFILE}"
        TIMEOUT_PID=$!
        wait "${TIMEOUT_PID}" > /dev/null 2>&1
        RET=$?

        # return codes
        # https://www.gnu.org/software/coreutils/manual/coreutils.html#timeout-invocation

        # because of the execution in the backgroud we get a 137 for a timeout
        if [ "${RET}" -eq 137 ] || [ "${RET}" -eq 124 ] ; then
            prepend_critical_message "Timeout after ${time} seconds"
            critical "${SHORTNAME} CRITICAL: Timeout after ${time} seconds"
        elif [ "${RET}" -eq 125 ] ; then
            prepend_critical_message "execution of ${command} failed"
        elif [ "${RET}" -eq 126 ] ; then
            prepend_critical_message "${command} is found but cannot be invoked"
        elif [ "${RET}" -eq 127 ] ; then
            prepend_critical_message "${command} cannot be found"
        fi

        end_time=$( date +%s )
        TIMEOUT=$(( TIMEOUT - end_time + start_time ))
	debuglog "  end time = ${end_time}"
	debuglog "  new timeout = ${TIMEOUT}"
	if [ "${TIMEOUT}" -lt 1 ] ; then TIMEOUT=1; fi

        return "${RET}"

    elif [ -n "${EXPECT}" ] ; then

        # just to tell shellcheck that the variable is assigned
        # (in fact the value is assigned with the function set_value)
        EXPECT_SCRIPT=''
        TIMEOUT_ERROR_CODE=42

        set_variable EXPECT_SCRIPT << EOT

set echo \"-noecho\"
set timeout ${time}

# spawn the process
spawn -noecho sh -c { ${command} > ${OUTFILE} 2> ${ERRFILE} }

expect {
  timeout { exit ${TIMEOUT_ERROR_CODE} }
  eof
}

# Get the return value
# https://stackoverflow.com/questions/23614039/how-to-get-the-exit-code-of-spawned-process-in-expect-shell-script

foreach { pid spawnid os_error_flag value } [wait] break

# return the command return value
exit \$value

EOT

        debuglog 'Executing expect script'
        debuglog "$(printf '%s' "${EXPECT_SCRIPT}")"

        echo "${EXPECT_SCRIPT}" | expect
        RET=$?

        debuglog "expect returned ${RET}"

        if [ "${RET}" -eq "${TIMEOUT_ERROR_CODE}" ] ; then
            prepend_critical_message "Timeout after ${time} seconds"
            critical "${SHORTNAME} CRITICAL: Timeout after ${time} seconds"
        fi

        end_time=$( date +%s )
        TIMEOUT=$(( TIMEOUT - end_time + start_time ))
	debuglog "  end time = ${end_time}"
	debuglog "  new timeout = ${TIMEOUT}"
	if [ "${TIMEOUT}" -lt 1 ] ; then TIMEOUT=1; fi

        return "${RET}"

    else

        debuglog "$(printf "%s\\n" eval "${command}")"

        eval "${command}" > "${OUTFILE}" 2> "${ERRFILE}"
        RET=$?

        end_time=$( date +%s )

        # we deduce the command duration from the total specified timeout
        TIMEOUT=$(( TIMEOUT - end_time + start_time ))
	debuglog "  end time = ${end_time}"
	debuglog "  new timeout = ${TIMEOUT}"
	if [ "${TIMEOUT}" -lt 1 ] ; then TIMEOUT=1; fi

        return "${RET}"

    fi


}

################################################################################
# Checks if a given program is available and executable
# Params
#   $1 program name
# Returns 1 if the program exists and is executable
check_required_prog() {

    PROG=$(command -v "$1" 2> /dev/null)

    if [ -z "${PROG}" ] ; then
        unknown "cannot find program: $1"
    fi

    if [ ! -x "${PROG}" ] ; then
        unknown "${PROG} is not executable"
    fi

}

################################################################################
# Adds metric to performance data
# Params
#   $1 performance data in nagios plugin format,
#      see https://nagios-plugins.org/doc/guidelines.html#AEN200
add_performance_data() {
    if [ -z "${PERFORMANCE_DATA}" ]; then
        PERFORMANCE_DATA="|${1}"
    else
        PERFORMANCE_DATA="${PERFORMANCE_DATA} $1"
    fi
}

################################################################################
# Prepares sed-style command for variable replacement
# Params
#   $1 variable name (e.g. SHORTNAME)
#   $2 variable value (e.g. LETSDEBUG)
var_for_sed() {
    echo "s|%$1%|$( echo "$2" | sed -e 's#|#\\\\|#g' )|g"
}

################################################################################
# Performs a grep removing the NULL characters first
#
# As the POSIX grep does not have the -a option, we remove the NULL characters
# first to avoid the error Binary file matches
#
# Params
#  $1 pattern
#  $2 file
#
ascii_grep() {
    tr -d '\000' < "$2" | grep -q "$1"
}

################################################################################
# Checks if there is an option argument (should not begin with -)
#
# Params
#  $1 name of the option (e.g., '-w,--waring') to be used in the error message
#  $2 next command line parameter
check_option_argument() {

    if [ -z "$2" ] || [ "${2%${2#?}}"x = '-x' ] ; then
        unknown "'${1}' requires an argument"
    fi

}

################################################################################
# Parse command line options
#
# Params
#  $* options
parse_command_line_options() {

     COMMAND_LINE_ARGUMENTS=$*

     while true; do

         case "$1" in

            ########################################
            # Options without arguments

            -d|--debug)
                DEBUG=$(( DEBUG + 1 ))
                shift
                ;;
            -h|--help|-\?)
                usage
                ;;
            -v|--verbose)
                VERBOSE=$((VERBOSE+1))
                shift
                ;;
            -V|--version)
                echo "check_letsdebug version ${VERSION}"
                exit "${STATUS_UNKNOWN}"
                ;;
            -4)
                INETPROTO="-4"
                shift
                ;;
            -6)
                INETPROTO="-6"
                shift
                ;;


            ########################################
            # Options with one argument

            --curl-bin)
                check_option_argument '--curl-bin' "$2"
                CURL_BIN="$2"
                shift 2
                ;;
            --curl-user-agent)
                check_option_argument '--curl-user-agent' "$2"
                CURL_USER_AGENT="$2"
                shift 2
                ;;
            --debug-file)
                check_option_argument '--debug-file' "$2"
                DEBUG_FILE="$2"
                shift 2
                ;;
            --inetproto)
                check_option_argument '--inetproto' "$2"
                INETPROTO="-$2"
                shift 2
                ;;
            -D|--domain)
                check_option_argument '-D|--domain' "$2"
                DOMAIN="$2"
                shift 2
                ;;
            --proxy)
                check_option_argument '--proxy' "$2"
                PROXY="$2"
                export http_proxy="$2"
                shift 2
                ;;
            -t|--timeout)
                check_option_argument '-t|--timeout' "$2"
                TIMEOUT="$2"
                shift 2
                ;;
            --temp)
                check_option_argument '--temp' "$2"
                TMPDIR="$2"
                shift 2
                ;;

            ########################################
            # Special
            --)
                shift
                break
                ;;
            -*)
                # we try to check for grouped variables
                OPTION="${1}"
                # if the option begins with a single dash and it's longer than one character
                if ! echo "${OPTION}" | grep -q -- '^--' &&
                        [ "$( echo "${OPTION}" | wc -c | sed 's/\ //g' )" -gt 3 ] ; then
                    if [ -n "${DEBUG}" ] ; then
                        echo "[DBG]   unknown option ${OPTION}: splitting since it could be an option group"
                    fi
                    for letter in $( echo "${OPTION}" | sed 's/^-//' | grep -o . ) ; do
                        parse_command_line_options "-${letter}"
                    done
                    shift
                else
                    unknown "invalid option: ${1}"
                fi
                ;;
            *)
                if [ -n "$1" ] ; then
                    unknown "invalid option: ${1}"
                fi
                break
                ;;
        esac

    done

}


################################################################################
# Main
################################################################################
main() {

    # Default values
    DEBUG="0"
    CURL_BIN=""
    CURL_PROXY=""
    CURL_USER_AGENT=""
    TIMEOUT="120"
    VERBOSE="0"
    NO_PROXY=""
    PROXY=""

    # Set the default temp dir if not set
    if [ -z "${TMPDIR}" ] ; then
        TMPDIR="/tmp"
    fi

    ################################################################################
    # Process command line options
    #
    # We do not use getopts since it is unable to process long options and it is
    # Bash specific.

    parse_command_line_options "$@"

    if [ -n "${DEBUG_FILE}" ] ; then
        open_for_writing "${DEBUG_FILE}"
    fi

    debuglog "Command line arguments: ${COMMAND_LINE_ARGUMENTS}"

    ##############################
    # Check options: sanity checks

    if [ -z "${DOMAIN}" ] ; then
        usage "No domain specified"
    fi

    # check if grep is in the path (see #244)
    if ! echo 0 | grep 0 > /dev/null 2>&1 ; then
        unknown "cannot execute grep: please check the PATH variable (${PATH})"
    fi

    if [ -n "${TMPDIR}" ] ; then

        if [ ! -d "${TMPDIR}" ] ; then
            unknown "${TMPDIR} is not a directory";
        fi

        if [ ! -w "${TMPDIR}" ] ; then
            unknown "${TMPDIR} is not writable";
        fi

    fi

    #######################
    # Check needed programs

    # cURL
    if [ -z "${CURL_BIN}" ] ; then
        debuglog "cURL binary not specified"

        check_required_prog curl
        CURL_BIN=${PROG}

        debuglog "cURL available: ${CURL_BIN}"
        debuglog "$( ${CURL_BIN} --version )"

    else
        # we check if the provided binary actually works
        check_required_prog "${CURL_BIN}"
    fi

    # Expect (optional)
    EXPECT="$(command -v expect 2> /dev/null)"
    test -x "${EXPECT}" || EXPECT=""
    if [ -z "${EXPECT}" ] ; then
        verboselog "expect not available" 2
    else
        verboselog "expect available (${EXPECT})" 2
    fi

    # Timeout (optional)
    TIMEOUT_BIN="$(command -v timeout 2> /dev/null)"
    test -x "${TIMEOUT_BIN}" || TIMEOUT_BIN=""
    if [ -z "${TIMEOUT_BIN}" ] ; then
        verboselog "timeout not available" 2
    else
        verboselog "timeout available (${TIMEOUT_BIN})" 2
    fi

    if [ -z "${TIMEOUT_BIN}" ] && [ -z "${EXPECT}" ] ; then
        verboselog "disabling timeouts"
    fi

    PERL="$(command -v perl 2> /dev/null)"

    if [ "${DEBUG}" -ge 1 ] ; then

        debuglog "check_letsdebug version: ${VERSION}"

        debuglog " System info: $( uname -a )"

    fi

    if [ -n "${PROXY}" ] && [ -n "${NO_PROXY}" ] ; then
        unknown "Only one of --proxy or --no_proxy can be specfied"
    fi

    ################################################################################
    # If --no-proxy was specified unset the http_proxy variables
    if [ -n "${NO_PROXY}" ] ; then
        debuglog "Disabling the proxy"
        unset http_proxy
        unset https_proxy
        unset HTTP_PROXY
        unset HTTPS_PROXY
    fi

    ################################################################################
    #
    CURL_PROXY=
    CURL_PROXY_ARGUMENT=
    if [ -n "${http_proxy}" ] || [ -n "${HTTP_PROXY}" ] ; then

        debuglog "Proxy settings (before):"
        debuglog "  http_proxy  = ${http_proxy}"
        debuglog "  https_proxy = ${https_proxy}"
        debuglog "  HTTP_PROXY  = ${HTTP_PROXY}"
        debuglog "  HTTPS_PROXY = ${HTTPS_PROXY}"

        if [ -n "${http_proxy}" ] ; then
            HTTP_PROXY="${http_proxy}"
        fi

        if [ -z "${https_proxy}" ] ; then
            # try to set https_proxy
            https_proxy="${http_proxy}"
        fi

        if [ -z "${HTTPS_PROXY}" ] ; then
            # try to set HTTPS_proxy
            HTTPS_PROXY="${HTTP_PROXY}"
        fi

        if ${CURL_BIN} --manual | grep -F -q -- --proxy ; then
            debuglog "Adding --proxy ${HTTP_PROXY} to the cURL options"
            CURL_PROXY="--proxy"
            CURL_PROXY_ARGUMENT="${HTTP_PROXY}"
        fi

        debuglog "Proxy settings (after):"
        debuglog "  http_proxy  = ${http_proxy}"
        debuglog "  https_proxy = ${https_proxy}"
        debuglog "  HTTP_PROXY  = ${HTTP_PROXY}"
        debuglog "  HTTPS_PROXY = ${HTTPS_PROXY}"
        debuglog "  cURL        = ${CURL_PROXY} ${CURL_PROXY_ARGUMENT}"

    fi

    ################################################################################
    # --inetproto validation
    if [ -n "${INETPROTO}" ] ; then

        # validate the arguments
        if [ "${INETPROTO}" != "-4" ] && [ "${INETPROTO}" != "-6" ] ; then
            VERSION=$(echo "${INETPROTO}" | awk  '{ string=substr($0, 2); print string; }' )
            unknown "Invalid argument '${VERSION}': the value must be 4 or 6"
        fi

        # Check if cURL is needed and if it supports the -4 and -6 options
        if [ -z "${CURL_BIN}" ] ; then
            if ! "${CURL_BIN}" --manual | grep -F -q -- -6 && [ -n "${INETPROTO}" ] ; then
                unknown "cURL does not support the ${INETPROTO} option"
            fi
        fi

        # check if IPv6 is available locally
        if [ -n "${INETPROTO}" ] && [ "${INETPROTO}" -eq "-6" ] && ! ifconfig -a | grep -F -q inet6 ; then
            unknown "cannot connect using IPv6 as no local interface has  IPv6 configured"
        fi

    fi

    # Cleanup before program termination
    # Using named signals to be POSIX compliant
    # shellcheck disable=SC2086
    trap_with_arg cleanup ${SIGNALS}

    verboselog "Checking ${DOMAIN}"

    TEST=$( curl -s --data '{"method":"http-01","domain":"'"${DOMAIN}"'"}' -H 'content-type: application/json' https://letsdebug.net )

    debuglog "  output = ${TEST}"

    ID=$( echo "${TEST}" | sed 's/.*ID"://' | sed 's/}//' )

    debuglog "Test ID = ${ID}"

    while true ; do

        verboselog "  checking test ID ${ID}"

        debuglog "exeuting curl -s -H 'accept: application/json' \"https://letsdebug.net/${DOMAIN}/${ID}\""

        RESULT=$( curl -s -H 'accept: application/json' "https://letsdebug.net/${DOMAIN}/${ID}" )

        debuglog "  ${RESULT}"

        if ! echo "${RESULT}" | grep -q -i processing ; then
            break
        fi

        WAITTIME=5
        verboselog "Waiting ${WAITTIME} seconds for test to complete"
        sleep "${WAITTIME}"

    done

    if echo "${RESULT}" | grep -q 'problems' ; then
        OUTPUT=$( echo "${RESULT}" | sed 's/.*explanation":"//' | sed 's/","severity.*//' | sed 's/","detail.*//'  )
        debuglog "Critical output: ${OUTPUT}"
        prepend_critical_message "${OUTPUT}"
    fi

    # if errors exist at this point return
    if [ "${CRITICAL_MSG}" != "" ] ; then
        critical "${CRITICAL_MSG}"
    fi

    if [ "${WARNING_MSG}" != "" ] ; then
        warning "${WARNING_MSG}"
    fi

    ################################################################################
    # If we get this far, assume all is well. :)

    if [ -z "${FORMAT}" ]; then
        FORMAT="%SHORTNAME% %DOMAIN% OK"
    fi

    echo "${FORMAT}" | sed \
        -e "$( var_for_sed SHORTNAME "${SHORTNAME}" )" \
        -e "$( var_for_sed DOMAIN "${DOMAIN}" )"

    remove_temporary_files

    exit "${STATUS_OK}"

}

# Defined externally
# shellcheck disable=SC2154
if [ -z "${SOURCE_ONLY}" ]; then
    main "${@}"
fi
